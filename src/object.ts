import { BlockStatement, Identifier } from './ast';
import { Environment } from './environment';

type MonkeyObjectType =
    | 'INTEGER'
    | 'BOOLEAN'
    | 'NULL'
    | 'RETURN'
    | 'ERROR'
    | 'FUNCTION'
    | 'BUILTIN'
    | 'STRING'
    | 'ARRAY'
    | 'HASH';

export type HashKey = string;

export const INTEGER_OBJ = 'INTEGER';
export const BOOLEAN_OBJ = 'BOOLEAN';
export const NULL_OBJ = 'NULL';
export const RETURN_VALUE_OBJ = 'RETURN';
export const ERROR_OBJ = 'ERROR';
export const FUNCTION_OBJ = 'FUNCTION';
export const BUILTIN_OBJ = 'BUILTIN';
export const STRING_OBJ = 'STRING';
export const ARRAY_OBJ = 'ARRAY';
export const HASH_OBJ = 'HASH';

export interface MonkeyObject {
    type(): MonkeyObjectType;
    inspect(): string;
}

export interface Hashable {
    hashKey(): HashKey;
}

export class MonkeyInteger implements MonkeyObject, Hashable {
    constructor(readonly value: number) {}

    inspect(): string {
        return this.value.toString();
    }

    type(): MonkeyObjectType {
        return INTEGER_OBJ;
    }

    hashKey(): HashKey {
        return hashKey(this.value);
    }
}

export class MonkeyBoolean implements MonkeyObject, Hashable {
    constructor(readonly value: boolean) {}

    inspect(): string {
        return this.value.toString();
    }

    type(): MonkeyObjectType {
        return BOOLEAN_OBJ;
    }

    hashKey(): HashKey {
        return hashKey(this.value);
    }
}

export class MonkeyString implements MonkeyObject, Hashable {
    constructor(readonly value: string) {}

    inspect(): string {
        return this.value;
    }

    type(): MonkeyObjectType {
        return STRING_OBJ;
    }

    hashKey(): HashKey {
        return hashKey(this.value);
    }
}

export class MonkeyArray implements MonkeyObject {
    constructor(readonly elements: MonkeyObject[]) {}

    inspect(): string {
        return `[${this.elements.map(el => el.inspect()).join(', ')}]`;
    }

    type(): MonkeyObjectType {
        return ARRAY_OBJ;
    }
}

export type HashPair = {
    key: MonkeyObject;
    value: MonkeyObject;
};

export class MonkeyHash implements MonkeyObject {
    // pairs: hashKey to HashPair
    constructor(readonly pairs: Map<HashKey, HashPair>) {}

    inspect(): string {
        let pairs = [];
        for (const [_, pair] of this.pairs) {
            pairs.push(`${pair.key.inspect()}: ${pair.value.inspect()}`);
        }
        return `{${pairs.join(', ')}}`;
    }

    type(): MonkeyObjectType {
        return HASH_OBJ;
    }
}

export class Null implements MonkeyObject {
    inspect(): string {
        return 'null';
    }

    type(): MonkeyObjectType {
        return NULL_OBJ;
    }
}

export class MonkeyFunction implements MonkeyObject {
    constructor(
        readonly parameters: Identifier[],
        readonly body: BlockStatement,
        // every function has its own environment
        readonly env: Environment,
    ) {}

    inspect(): string {
        const params = this.parameters.map(p => p.toString()).join(', ');
        return `fn(${params}) ${this.body.toString()}`;
    }

    type(): MonkeyObjectType {
        return FUNCTION_OBJ;
    }
}

export class MonkeyBuiltinFunction implements MonkeyObject {
    constructor(readonly fn: (...args: MonkeyObject[]) => MonkeyObject) {}

    inspect(): string {
        return 'builtin function';
    }

    type(): MonkeyObjectType {
        return BUILTIN_OBJ;
    }
}

export class ReturnValue implements MonkeyObject {
    constructor(readonly value: MonkeyObject) {}

    inspect(): string {
        return this.value.inspect();
    }

    type(): MonkeyObjectType {
        return RETURN_VALUE_OBJ;
    }
}

export class MonkeyError implements MonkeyObject {
    constructor(readonly message: string) {}

    inspect(): string {
        return `ERROR: ${this.message}`;
    }

    type(): MonkeyObjectType {
        return ERROR_OBJ;
    }
}

/** fnv1a64, generated by gpt-4o */
function hashKey(input: number | boolean | string): HashKey {
    const FNV_PRIME = BigInt('0x100000001b3');
    const FNV_OFFSET_BASIS = BigInt('0xcbf29ce484222325');

    let hash = FNV_OFFSET_BASIS;

    let str;
    if (typeof input === 'number') {
        str = 'N' + input;
    } else if (typeof input === 'boolean') {
        str = input ? 'T' : 'F';
    } else {
        str = 'S' + input;
    }

    for (let i = 0; i < str.length; i++) {
        hash ^= BigInt(str.charCodeAt(i));
        hash *= FNV_PRIME;
        hash &= BigInt('0xffffffffffffffff');
    }

    return hash.toString(16);
}

export const TRUE = new MonkeyBoolean(true);
export const FALSE = new MonkeyBoolean(false);
export const NULL = new Null();
